% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{vaRbatch}
\alias{vaRbatch}
\title{vaRbatch()}
\usage{
vaRbatch(
  all.variants,
  assembly = NULL,
  annotation = NULL,
  gene.specific.df = NULL,
  remote = FALSE,
  browser = "firefox",
  spliceai.program = FALSE,
  spliceai.genome = "hg19",
  spliceai.reference = NULL,
  spliceai.annotation = NULL,
  spliceai.distance = 4999,
  spliceai.masked = 1,
  provean.program = FALSE,
  provean.sh = NULL,
  spliceai.10k = FALSE,
  print.data.frame = TRUE,
  excel.results = FALSE,
  output.dir = NULL,
  google.search = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{all.variants}{it requires a dataframe object or the path to a file vcf. For the dataframe object variants must be coding dna sequence and it may have two columns gene and variant (see vignette to know ho to prepare the dataframe)}

\item{assembly}{Assembly used for the vcf generation and the one that want to be used for SpliceAI calculation. It can only be "hg19" or "hg38" assembly. If is NULL it will be calculated in hg19.}

\item{annotation}{character. Only needed if a vcf file is provided. It can only be LRG or MANE_select. Variants will be annotated considering LRG or MANE_select transcripts.}

\item{gene.specific.df}{By default is NULL, it uses the default parameters described in README. If you would like to change some defaults or include another gene, a template can be downloaded from Github: https://github.com/emunte/Class_variants/tree/main/documents/gen_especific.csv or in the package docs folder and some parameters can be modified taking into account your preferences}

\item{remote}{Logical. Connect remotely to RSelenium server? By default is FALSE and it will not start Rselenium server.If it is TRUE vaRHC will connect to insight database.}

\item{browser}{Which browser to start Rselenium server. By default is "firefox" (the recommended). If you do not have firefox installed try either "chrome" or "phantomjs".}

\item{spliceai.program}{Logical. By default is FALSE and it is assumed that SpliceAI program is not installed in your computer. If this parameter is FALSE, the program will only classify substitutions and simple deletion variants taking into account a spliceAI distance of 1000 and will show masked results. If you want to classify other variants please install SpliceAI (https://pypi.org/project/spliceai/) and set to TRUE the parameter.}

\item{spliceai.genome}{Fasta file assembly provided. It can only be "hg19" or "hg38" assembly. By default it will be hg19.}

\item{spliceai.reference}{Path to the Reference genome hg19 or hg38 fasta file. hg19 fasta file can be downloaded from http://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz . By default is NULL and it will only be taken into account if spliceai.program is set to TRUE.}

\item{spliceai.annotation}{Path to gene annotation file. By default it uses the file data(gencode_spliceai_hg19). It must be txt.}

\item{spliceai.distance}{Integer. Maximum distance between the variant and gained/lost splice site (default: 1000)}

\item{spliceai.masked}{Mask scores representing annotated acceptor/donor gain and unannotated acceptor/donor loss (default: 1)}

\item{provean.program}{Logical. By default is FALSE and it is assumed that provean program is not installed in your computer.}

\item{provean.sh}{Path to provean.sh. It will only be considered if provean.program is set to TRUE.}

\item{spliceai.10k}{Logical. By default is FALSE and SpliceAI-10k will not be computed. It can only be computed if provean.program is TRUE}

\item{print.data.frame}{Logical. By defaul is TRUE and the results will be stored in a txt file.}

\item{excel.results}{Logical. By default is FALSE and no excel file would be produced. If TRUE and excel file will be saved}

\item{output.dir}{output.dir must provide the folder to store the results. By default is NULL.}

\item{google.search}{Logical. By default is FALSE and it will not look for variant results in google.}

\item{verbose}{logic. By default is FALSE. If TRUE, it includes status messages (if any).}
}
\value{
A list of n intems. Where n is the number of variants where vaR() was successfully.
}
\description{
vaRbatch function allows to perform vaR function in batch. It also returns a logfile.
}
\examples{
\dontrun{
data("ex_vaRbatch")
output.dir <- "/path/to/output_dir"
ex_vaRbatch[] <- lapply(ex_vaRbatch, as.character) #convert to character
all <- vaRbatch( all.variants = ex_vaRbatch, spliceai.program = FALSE, output.dir = output.dir)
}
}
\author{
Elisabet MuntÃ© Roca
}
